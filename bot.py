import telebot
import info
from dotenv import dotenv_values
from telebot import types
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, Message

config = dotenv_values(".env")
token = config['token']
bot = telebot.TeleBot(token=token)


def create_menu(list: [info.Btn]) -> types.InlineKeyboardMarkup:
    markup = types.InlineKeyboardMarkup()
    for i in list:
        btn = types.InlineKeyboardButton(text=i.title, callback_data=i.id)
        markup.add(btn)
    return markup


@bot.message_handler(commands=['start'])
def start_command(message):
    bot.send_message(message.chat.id,
                     '–ü—Ä–∏–≤–µ—Ç,—ç—Ç–æ –±–æ—Ç_–∞–Ω–∫–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–≤–æ–π —Ü–≤–µ—Ç–æ—Ç–∏–ø. –Ø –Ω–∞–¥–µ—é—Å—å, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è –º–æ—è —Ä–∞–±–æ—Ç–∞ –∏ –≤—ã –ø—Ä–æ—Ä–µ–∫–ª–∞–º–∏—Ä—É–µ—Ç–µ –º–µ–Ω—è –¥—Ä—É–∑—å—è–º!üòÅ(–ï—â–µ –±–æ—Ç —É–º–µ–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–∏–ø–∞ - –ø—Ä–∏–≤–µ—Ç –∏–ª–∏ –ø–æ–∫–∞)')
    bot.send_message(message.chat.id, "–≠—Ç–æ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ —è —É–º–µ—é –≤—ã–ø–æ–ª–Ω—è—Ç—å:\n"
                                      "/start ; –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–º—É –º–µ–Ω—é.\n"
                                      "/help ; –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–º—É –º–µ–Ω—é.\n"
                                      "/play ; –ù–∞—á–∏–Ω–∞–µ—Ç –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã.\n"
                                      "/restart ; –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –∑–∞–Ω–æ–≤–æ.\n")
    bot.send_message(message.chat.id, info.project_to_str())


@bot.message_handler(commands=['help'])
def help_command(message):
    bot.send_message(message.chat.id, '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º_–∞–Ω–∫–µ—Ç–æ–π : ...')
    bot.send_message(message.chat.id, "–≠—Ç–æ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ —è —É–º–µ—é –≤—ã–ø–æ–ª–Ω—è—Ç—å:\n"
                                      "/start ; –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–º—É –º–µ–Ω—é.\n"
                                      "/help ; –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–º—É –º–µ–Ω—é.\n"
                                      "/play ; –ù–∞—á–∏–Ω–∞–µ—Ç –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã.\n"
                                      "/restart ; –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –∑–∞–Ω–æ–≤–æ.\n")


def next_question(user, chat_id):
    question = user.get_next_question()
    answer = user.get_answer()
    if question == None:
        bot.send_message(chat_id, "–∞–Ω–∫–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        bot.send_photo(chat_id, open(answer['image'], 'rb'))
        bot.send_message(chat_id, answer['title'])
        return
    list = info.questions_list[question]["list"]
    title = info.questions_list[question]["title"]
    bot.send_message(chat_id, title, reply_markup=create_menu(list))


@bot.message_handler(commands=['play'])
def play_command(message):
    user_id = message.from_user.id
    user = info.User(user_id)
    next_question(user, message.chat.id)


@bot.message_handler(commands=['restart'])
def play_command(message):
    user_id = message.from_user.id
    user = info.User(user_id)
    user.restart()
    bot.send_message(message.chat.id, "–ù–∞–∂–º–∏—Ç–µ /play —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ.")


@bot.message_handler(content_types=['text'])
def hello_saying(message):
    if "–ø—Ä–∏–≤–µ—Ç" in message.text.lower():
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç!")
    elif "–ø–æ–∫–∞" in message.text.lower():
        bot.send_message(message.chat.id, "–ü–æ–∫–∞!")
    else:
        bot.send_message(message.chat.id, "–Ø –ø–æ–¥—É–º–∞—é –æ–± —ç—Ç–æ–º ... :)")


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    user_id = call.from_user.id
    user = info.User(user_id)
    user.handler(call.data)
    next_question(user, call.message.chat.id)


@bot.message_handler(content_types=['text'])
def handle_start(message: Message):
    if message.text == 'pass':
        pass


bot.polling()
